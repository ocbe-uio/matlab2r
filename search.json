[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Waldir Leoncio. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leoncio W (2022). matlab2r: Translation Layer MATLAB R. R package version 1.1.1.","code":"@Manual{,   title = {matlab2r: Translation Layer from MATLAB to R},   author = {Waldir Leoncio},   year = {2022},   note = {R package version 1.1.1}, }"},{"path":"/index.html","id":"matlab2r-a-translation-layer-from-matlab-to-r","dir":"","previous_headings":"","what":"Translation Layer from MATLAB to R","title":"Translation Layer from MATLAB to R","text":"R package facilitate usage MATLAB functions R. languages contain functions similar purpose, different names. package allows R user comfortable MATLAB use several MATLAB functions R.","code":""},{"path":[]},{"path":"/index.html","id":"stable-version","dir":"","previous_headings":"","what":"Stable version","title":"Translation Layer from MATLAB to R","text":"matlab2r available CRAN can installed running following interactive R session:","code":"install.packages(\"matlab2r\")"},{"path":"/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"Translation Layer from MATLAB to R","text":"development version package contains features bug fixes yet published. hand, ’s much less stable. can install development version matlab2r running following command R (requires remotes package installed beforehand):","code":"remotes::install_github(\"ocbe-uio/matlab2r\", \"develop\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Translation Layer from MATLAB to R","text":"Found bug? Want new feature? Please post thoughts , contributions welcome properly credited!","code":""},{"path":"/index.html","id":"citing","dir":"","previous_headings":"","what":"Citing","title":"Translation Layer from MATLAB to R","text":"cite package matlab2r publications use: Waldir Leoncio (2022). matlab2r: Translation Layer MATLAB R. R package version 1.0.0. https://CRAN.R-project.org/package=matlab2r BibTeX entry LaTeX users ","code":"@Manual{,   title = {matlab2r: Translation Layer from MATLAB to R},   author = {Waldir Leoncio},   year = {2022},   note = {R package version 1.0.0},   url = {https://CRAN.R-project.org/package=matlab2r}, }"},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/blanks.html","id":null,"dir":"Reference","previous_headings":"","what":"Blanks — blanks","title":"Blanks — blanks","text":"Create character vector blanks","code":""},{"path":"/reference/blanks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blanks — blanks","text":"","code":"blanks(n)"},{"path":"/reference/blanks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blanks — blanks","text":"n length vector","code":""},{"path":"/reference/blanks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blanks — blanks","text":"Vector n blanks","code":""},{"path":"/reference/blanks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blanks — blanks","text":"function emulates behavior homonimous function Matlab","code":""},{"path":"/reference/blanks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Blanks — blanks","text":"Waldir Leoncio","code":""},{"path":"/reference/blanks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blanks — blanks","text":"","code":"blanks(1) #> [1] \" \" blanks(3) #> [1] \"   \""},{"path":"/reference/cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell array — cell","title":"Cell array — cell","text":"Creates array zeros","code":""},{"path":"/reference/cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell array — cell","text":"","code":"cell(n, sz = c(n, n), expandable = FALSE, ...)"},{"path":"/reference/cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell array — cell","text":"n first dimension (, sz passed) sz second dimension (1st 2nd, passed) expandable TRUE, output list (can take different lengths) ... dimensions","code":""},{"path":"/reference/cell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell array — cell","text":"array zeroes dimensions passed call","code":""},{"path":"/reference/cell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell array — cell","text":"","code":"cell(5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 cell(5, 2) #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #> [3,]    0    0 #> [4,]    0    0 #> [5,]    0    0"},{"path":"/reference/colon.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector creation — colon","title":"Vector creation — colon","text":"Simulates function colon() equivalent : operator Matlab, similar quite equivalent behavior compared seq() : R.","code":""},{"path":"/reference/colon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector creation — colon","text":"","code":"colon(a, b)"},{"path":"/reference/colon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector creation — colon","text":"initial number b final number","code":""},{"path":"/reference/colon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector creation — colon","text":"vector containing sequence integers going b","code":""},{"path":"/reference/colon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector creation — colon","text":"","code":"colon(1, 4) #> [1] 1 2 3 4 colon(4, 8) #> [1] 4 5 6 7 8"},{"path":"/reference/find.html","id":null,"dir":"Reference","previous_headings":"","what":"Find indices and values of nonzero elements — find","title":"Find indices and values of nonzero elements — find","text":"Emulates behavior find","code":""},{"path":"/reference/find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find indices and values of nonzero elements — find","text":"","code":"find(x, sort = TRUE)"},{"path":"/reference/find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find indices and values of nonzero elements — find","text":"x object logic operation object sort sort output?","code":""},{"path":"/reference/find.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find indices and values of nonzero elements — find","text":"vector indices x satisfy logical test (nonzero, default).","code":""},{"path":"/reference/find.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find indices and values of nonzero elements — find","text":"","code":"X <- matrix(c(1, 0, 2, 0, 1, 1, 0, 0, 4), 3, byrow = TRUE) Y <- seq(1, 19, 2) find(X) #> [1] 1 5 7 8 9 find(Y == 13) #> [1] 7"},{"path":"/reference/fix.html","id":null,"dir":"Reference","previous_headings":"","what":"Round toward zero — fix","title":"Round toward zero — fix","text":"Rounds element input nearest integer towards zero. Basically trunc()","code":""},{"path":"/reference/fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round toward zero — fix","text":"","code":"fix(X)"},{"path":"/reference/fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round toward zero — fix","text":"X input element","code":""},{"path":"/reference/fix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round toward zero — fix","text":"values trunc(X).","code":""},{"path":"/reference/fix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Round toward zero — fix","text":"Waldir Leoncio","code":""},{"path":"/reference/fix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round toward zero — fix","text":"","code":"X <- matrix(c(-1.9, -3.4, 1.6, 2.5, -4.5, 4.5), 3, byrow = TRUE) Y <- matrix(c(-1, -3, 1, 2, -4, 4), 3, byrow = TRUE) fix(X) #>      [,1] [,2] #> [1,]   -1   -3 #> [2,]    1    2 #> [3,]   -4    4 fix(Y) #>      [,1] [,2] #> [1,]   -1   -3 #> [2,]    1    2 #> [3,]   -4    4"},{"path":"/reference/gammaln.html","id":null,"dir":"Reference","previous_headings":"","what":"Logarithm of gamma function — gammaln","title":"Logarithm of gamma function — gammaln","text":"Calculates natural logarithm gamma function","code":""},{"path":"/reference/gammaln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logarithm of gamma function — gammaln","text":"","code":"gammaln(A)"},{"path":"/reference/gammaln.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logarithm of gamma function — gammaln","text":"non-negative, real matrix, vector scalar","code":""},{"path":"/reference/gammaln.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logarithm of gamma function — gammaln","text":"element--element ln(gamma())-transformed ","code":""},{"path":"/reference/gammaln.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Logarithm of gamma function — gammaln","text":"MATLAB output reproduction, non-positive values ","code":""},{"path":"/reference/gammaln.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Logarithm of gamma function — gammaln","text":"Waldir Leoncio","code":""},{"path":"/reference/gammaln.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logarithm of gamma function — gammaln","text":"","code":"gammaln(8) #> [1] 8.525161 gammaln(0) #> [1] Inf gammaln(matrix(1:9, 3)) #>           [,1]     [,2]      [,3] #> [1,] 0.0000000 1.791759  6.579251 #> [2,] 0.0000000 3.178054  8.525161 #> [3,] 0.6931472 4.787492 10.604603 gammaln(-4:10) #>  [1]        Inf        Inf        Inf        Inf        Inf  0.0000000 #>  [7]  0.0000000  0.6931472  1.7917595  3.1780538  4.7874917  6.5792512 #> [13]  8.5251614 10.6046029 12.8018275"},{"path":"/reference/inputdlg.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather user input — inputdlg","title":"Gather user input — inputdlg","text":"Replicates functionality homonymous function Matlab (sans dialog box)","code":""},{"path":"/reference/inputdlg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather user input — inputdlg","text":"","code":"inputdlg(prompt, dims = 1, definput = NULL)"},{"path":"/reference/inputdlg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather user input — inputdlg","text":"prompt Text field user instructions dims number dimensions answwers definput default value input","code":""},{"path":"/reference/inputdlg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather user input — inputdlg","text":"user prompt","code":""},{"path":"/reference/inputdlg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather user input — inputdlg","text":"","code":"if (FALSE) {  name <- inputdlg(\"Type your name\")  paste(\"Hello,\", name) }"},{"path":"/reference/isempty.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Array Empty? — isempty","title":"Is Array Empty? — isempty","text":"Determine whether array empty. empty array, table, timetable least one dimension length 0, 0--0 0--5.","code":""},{"path":"/reference/isempty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Array Empty? — isempty","text":"","code":"isempty(x)"},{"path":"/reference/isempty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Array Empty? — isempty","text":"x array","code":""},{"path":"/reference/isempty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Array Empty? — isempty","text":"logical value determining x empty","code":""},{"path":"/reference/isempty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is Array Empty? — isempty","text":"Emulates behavior isempty function Matlab","code":""},{"path":"/reference/isempty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is Array Empty? — isempty","text":"","code":"isempty(array(dim = c(0, 2, 2))) #> [1] TRUE isempty(matrix(rep(NA, 4), 2)) #> [1] FALSE isempty(matrix(rep(0, 4), 2)) #> [1] FALSE isempty(as.factor(c(NA, NA))) #> [1] FALSE isempty(factor()) #> [1] TRUE isempty(matrix(rep(\"\", 3))) #> [1] FALSE"},{"path":"/reference/isfield.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a list contains a field — isfield","title":"Checks if a list contains a field — isfield","text":"function tries replicate behavior isfield function Matlab","code":""},{"path":"/reference/isfield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a list contains a field — isfield","text":"","code":"isfield(x, field)"},{"path":"/reference/isfield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a list contains a field — isfield","text":"x list field name field","code":""},{"path":"/reference/isfield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a list contains a field — isfield","text":"logical vector determining field within names(x)","code":""},{"path":"/reference/isfield.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Checks if a list contains a field — isfield","text":"https://se.mathworks.com/help/matlab/ref/isfield.html","code":""},{"path":"/reference/isfield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a list contains a field — isfield","text":"","code":"S <- list(   x = rnorm(100),   title = \"x\" ) isfield(S, \"title\") #> title  #>  TRUE  isfield(S, \"z\") #>     z  #> FALSE"},{"path":"/reference/isspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine space characters — isspace","title":"Determine space characters — isspace","text":"Determine characters space characters","code":""},{"path":"/reference/isspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine space characters — isspace","text":"","code":"isspace(A)"},{"path":"/reference/isspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine space characters — isspace","text":"character array string scalar","code":""},{"path":"/reference/isspace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine space characters — isspace","text":"vector TF elements TF logical 1 (true) corresponding characters space characters, logical 0 (false) elsewhere.","code":""},{"path":"/reference/isspace.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine space characters — isspace","text":"Recognized whitespace characters   \\\\t.","code":""},{"path":"/reference/isspace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine space characters — isspace","text":"Waldir Leoncio","code":""},{"path":"/reference/isspace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine space characters — isspace","text":"","code":"chr <- \"123 Main St.\" X <- \"\\t a b\\tcde f\" isspace(chr) #>  [1] 0 0 0 1 0 0 0 0 1 0 0 0 isspace(X) #>  [1] 1 1 0 1 0 1 0 0 0 1 0"},{"path":"/reference/matlab2r.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Matlab function to R — matlab2r","title":"Convert Matlab function to R — matlab2r","text":"Performs basic syntax conversion Matlab function file R","code":""},{"path":"/reference/matlab2r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Matlab function to R — matlab2r","text":"","code":"matlab2r(   filename,   output = \"diff\",   improve_formatting = TRUE,   change_assignment = TRUE,   append = FALSE,   restyle = !improve_formatting )"},{"path":"/reference/matlab2r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Matlab function to R — matlab2r","text":"filename name file output can \"asis\", \"clean\", \"save\" \"diff\" improve_formatting TRUE (default), makes minor changes conform best-practice formatting conventions change_assignment TRUE (default), uses <- assignment operator append FALSE (default), overwrites file; otherwise, append output input restyle TRUE, restyle output styler (output = \"save\")","code":""},{"path":"/reference/matlab2r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Matlab function to R — matlab2r","text":"text converted R, printed screen replacing input file","code":""},{"path":"/reference/matlab2r.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert Matlab function to R — matlab2r","text":"function intended expedite process converting Matlab function R making common replacements. immediate goal outputting ready--use function. words, using function go back make minor changes. also advised dry-run output = \"clean\" switching output = \"save\" confident important code lost (shorter functions, careful visual inspection suffice).","code":""},{"path":"/reference/matlab2r.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Matlab function to R — matlab2r","text":"Waldir Leoncio","code":""},{"path":"/reference/matlab2r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Matlab function to R — matlab2r","text":"","code":"matlab_script <- system.file(\"extdata\", \"matlabDemo.m\", package = \"matlab2r\") matlab2r(matlab_script) #> Warning: Please pay special attention to parentheses. MATLAB uses them for both argument-passing and object-subsetting. The latter cases should be replaced by squared brackets. #> Displaying line number, original content and modified content #> ----------------------- line 1 ----------------------- #> function y = f(x) #> f <- function(x) { #> ----------------------- line 2 ----------------------- #> % This is a quick demonstration of MATLAB syntax. Its output is uninteresting. #> # This is a quick demonstration of MATLAB syntax. Its output is uninteresting. #> ----------------------- line 3 ----------------------- #> z = pi; #> z <- pi #> ----------------------- line 4 ----------------------- #> if (z == 0) #> if ((z == 0)) { #> ----------------------- line 5 ----------------------- #>   z = 10; #>   z <- 10 #> ----------------------- line 6 ----------------------- #> else #> } else { #> ----------------------- line 7 ----------------------- #>   disp('OK'); #>   disp('OK') #> ----------------------- line 8 ----------------------- #> end #> } #> ----------------------- line 9 ----------------------- #> for i = 1:10 #> for (i  in  1 10) { #> ----------------------- line 10 ----------------------- #>   z2 = i - z; #>   z2 <- i - z #> ----------------------- line 11 ----------------------- #> end #> } #> ----------------------- line 12 ----------------------- #> y = z + x - (1 * 3 / 9) ^ 2 + z2; #> y <- z + x - (1 * 3 / 9) ^ 2 + z2 #> ----------------------- line 13 ----------------------- #> NA #> \treturn(y) #> } matlab2r(matlab_script, output = \"clean\") #> Warning: Please pay special attention to parentheses. MATLAB uses them for both argument-passing and object-subsetting. The latter cases should be replaced by squared brackets. #> f <- function(x) { #> # This is a quick demonstration of MATLAB syntax. Its output is uninteresting. #> z <- pi #> if ((z == 0)) { #>   z <- 10 #> } else { #>   disp('OK') #> } #> for (i  in  1 10) { #>   z2 <- i - z #> } #> y <- z + x - (1 * 3 / 9) ^ 2 + z2 #> \treturn(y) #> }"},{"path":"/reference/max.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum (MATLAB version) — max","title":"Maximum (MATLAB version) — max","text":"Finds minimum value column matrix, potentially returning indices instead","code":""},{"path":"/reference/max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum (MATLAB version) — max","text":"","code":"max(X, indices = TRUE)"},{"path":"/reference/max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum (MATLAB version) — max","text":"X matrix indices return indices?","code":""},{"path":"/reference/max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum (MATLAB version) — max","text":"Either list vector","code":""},{"path":"/reference/max.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum (MATLAB version) — max","text":"Waldir Leoncio","code":""},{"path":"/reference/max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum (MATLAB version) — max","text":"","code":"A <- matrix(c(23, 42, 37, 15, 52)) max(A) #> $maxs #> [1] 52 #>  #> $idx #> [1] 5 #>  base::max(A) # for comparison #> [1] 52"},{"path":"/reference/min.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum (MATLAB version) — min","title":"Minimum (MATLAB version) — min","text":"Finds minimum value column matrix, potentially returning indices instead","code":""},{"path":"/reference/min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum (MATLAB version) — min","text":"","code":"min(X, indices = TRUE)"},{"path":"/reference/min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum (MATLAB version) — min","text":"X matrix indices return indices?","code":""},{"path":"/reference/min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum (MATLAB version) — min","text":"Either list vector","code":""},{"path":"/reference/min.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Minimum (MATLAB version) — min","text":"Waldir Leoncio","code":""},{"path":"/reference/min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum (MATLAB version) — min","text":"","code":"A <- matrix(c(23, 42, 37, 15, 52)) min(A) #> $mins #> [1] 15 #>  #> $idx #> [1] 4 #>  base::min(A) # for comparison #> [1] 15"},{"path":"/reference/nargin.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of function input arguments — nargin","title":"Number of function input arguments — nargin","text":"Returns number arguments passed parent function","code":""},{"path":"/reference/nargin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of function input arguments — nargin","text":"","code":"nargin()"},{"path":"/reference/nargin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of function input arguments — nargin","text":"integer indicating many input arguments function received.","code":""},{"path":"/reference/nargin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Number of function input arguments — nargin","text":"function makes sense inside another function","code":""},{"path":"/reference/nargin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Number of function input arguments — nargin","text":"https://stackoverflow.com/q/64422780/1169233","code":""},{"path":"/reference/nargin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of function input arguments — nargin","text":"Waldir Leoncio","code":""},{"path":"/reference/nargin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of function input arguments — nargin","text":"","code":"f <- function(x, y, z) return(nargin()) f(pi) #> [1] 1 f(y = 6, z = 5) #> [1] 2 f(letters) #> [1] 1 f(letters, LETTERS, pi) #> [1] 3"},{"path":"/reference/ones.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix of ones — ones","title":"Matrix of ones — ones","text":"wrapper zeros_or_ones() replicates behavior ones() function Matlab","code":""},{"path":"/reference/ones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix of ones — ones","text":"","code":"ones(n1, n2 = n1, ...)"},{"path":"/reference/ones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix of ones — ones","text":"n1 number rows n2 number columns ... extra dimensions","code":""},{"path":"/reference/ones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix of ones — ones","text":"n1--n2 matrix ones","code":""},{"path":"/reference/ones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix of ones — ones","text":"","code":"ones(3) #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    1    1    1 #> [3,]    1    1    1 ones(8, 1) #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1 #> [5,]    1 #> [6,]    1 #> [7,]    1 #> [8,]    1"},{"path":"/reference/questdlg.html","id":null,"dir":"Reference","previous_headings":"","what":"Prompt for multiple-choice — questdlg","title":"Prompt for multiple-choice — questdlg","text":"function aims loosely mimic behavior questdlg function Matlab","code":""},{"path":"/reference/questdlg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prompt for multiple-choice — questdlg","text":"","code":"questdlg(   quest,   dlgtitle = \"\",   btn = c(\"y\", \"n\"),   defbtn = \"n\",   accepted_ans = c(\"y\", \"yes\", \"n\", \"no\") )"},{"path":"/reference/questdlg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prompt for multiple-choice — questdlg","text":"quest Question dlgtitle Title question btn Vector alternatives defbtn Scalar name default option accepted_ans Vector containing accepted answers","code":""},{"path":"/reference/questdlg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prompt for multiple-choice — questdlg","text":"Whatever entered user prompt created function.","code":""},{"path":"/reference/questdlg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prompt for multiple-choice — questdlg","text":"","code":"if (FALSE) {   ans <- questdlg(\"Do you want to continue?\", \"Continue?\")   if (tolower(substring(ans, 1, 1)) == \"y\") {     message(\"You typed yes\")   } else {     message(\"You didn't type yes\")   } }"},{"path":"/reference/rand.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate matrix with U(0, 1) trials — rand","title":"Generate matrix with U(0, 1) trials — rand","text":"Imitates behavior rand() Matlab","code":""},{"path":"/reference/rand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate matrix with U(0, 1) trials — rand","text":"","code":"rand(r = 1, c = 1)"},{"path":"/reference/rand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate matrix with U(0, 1) trials — rand","text":"r number rows output matrix c number columns output matrix","code":""},{"path":"/reference/rand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate matrix with U(0, 1) trials — rand","text":"\\(r \\times c\\) matrix random trials standard uniform distribution.","code":""},{"path":"/reference/rand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate matrix with U(0, 1) trials — rand","text":"","code":"rand() #>            [,1] #> [1,] 0.07760197 rand(3, 2) #>           [,1]      [,2] #> [1,] 0.2184073 0.5935510 #> [2,] 0.0807965 0.8853341 #> [3,] 0.7505093 0.1981614"},{"path":"/reference/repmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeat matrix — repmat","title":"Repeat matrix — repmat","text":"Repeats matrix n columns rows","code":""},{"path":"/reference/repmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeat matrix — repmat","text":"","code":"repmat(mx, n)"},{"path":"/reference/repmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeat matrix — repmat","text":"mx matrix n either scalar number replications rows columns <= 3-length vector individual repetitions.","code":""},{"path":"/reference/repmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeat matrix — repmat","text":"matrix replicated ncol(mx) * n columns nrow(mx) * n rows","code":""},{"path":"/reference/repmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeat matrix — repmat","text":"function created replicate behavior homonymous function Matlab","code":""},{"path":"/reference/repmat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Repeat matrix — repmat","text":"Matlab implementation function accepts n length > 2. also noted concatenated vector R, e.g. c(5, 2), becomes column vector coerced matrix, even though may look like row vector first glance. important keep mind considering expected output function. Vectors R make sense seen column vectors, given R's Statistics-oriented paradigm variables usually disposed columns dataset.","code":""},{"path":"/reference/repmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeat matrix — repmat","text":"","code":"x <- matrix(1:4, 2) repmat(x, 1) #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 repmat(x, 2) #>      [,1] [,2] [,3] [,4] #> [1,]    1    3    1    3 #> [2,]    2    4    2    4 #> [3,]    1    3    1    3 #> [4,]    2    4    2    4 repmat(x, c(2, 3)) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    3    1    3    1    3 #> [2,]    2    4    2    4    2    4 #> [3,]    1    3    1    3    1    3 #> [4,]    2    4    2    4    2    4"},{"path":"/reference/reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape array — reshape","title":"Reshape array — reshape","text":"Reshapes matrix according certain number dimensions","code":""},{"path":"/reference/reshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape array — reshape","text":"","code":"reshape(A, sz)"},{"path":"/reference/reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape array — reshape","text":"input matrix sz vector containing dimensions output vector","code":""},{"path":"/reference/reshape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape array — reshape","text":"input matrix, reshaped according vector sz","code":""},{"path":"/reference/reshape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reshape array — reshape","text":"function replicates functionality reshape() function Matlab. function basically fancy wrapper array() function R, useful saves user translation time. Moreover, introduces validation code alter behavior array() makes similar replicate().","code":""},{"path":"/reference/reshape.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reshape array — reshape","text":"Matlab function also accepts input dismemberment sz scalars.","code":""},{"path":"/reference/reshape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape array — reshape","text":"","code":"mx <- matrix(1:4, 2) ra <- array(1:12, c(2, 3, 2))  mx #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 reshape(mx, c(1, 4)) #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4  ra #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    7    9   11 #> [2,]    8   10   12 #>  reshape(ra, c(3, 2, 2)) #> , , 1 #>  #>      [,1] [,2] #> [1,]    1    4 #> [2,]    2    5 #> [3,]    3    6 #>  #> , , 2 #>  #>      [,1] [,2] #> [1,]    7   10 #> [2,]    8   11 #> [3,]    9   12 #>"},{"path":"/reference/setdiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Set differences of two arrays — setdiff","title":"Set differences of two arrays — setdiff","text":"Loosely replicates behavior homonym Matlab function","code":""},{"path":"/reference/setdiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set differences of two arrays — setdiff","text":"","code":"setdiff(A, B, legacy = FALSE)"},{"path":"/reference/setdiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set differences of two arrays — setdiff","text":"first array B second array legacy TRUE, preserves behavior setdiff function MATLAB R2012b prior releases. (currently supported)","code":""},{"path":"/reference/setdiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set differences of two arrays — setdiff","text":"array containing elements B","code":""},{"path":"/reference/setdiff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set differences of two arrays — setdiff","text":"Waldir Leoncio","code":""},{"path":"/reference/setdiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set differences of two arrays — setdiff","text":"","code":"A <- c(3, 6, 2, 1, 5, 1, 1) B <- c(2, 4, 6) setdiff(A, B) #> [1] 1 3 5"},{"path":"/reference/size.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of an object — size","title":"Size of an object — size","text":"functions tries replicate behavior base function \"size\" Matlab","code":""},{"path":"/reference/size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of an object — size","text":"","code":"size(x, d)"},{"path":"/reference/size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of an object — size","text":"x object evaluated d dimension object evaluated","code":""},{"path":"/reference/size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of an object — size","text":"vector whose size number dimensions x whose scale corresponds number elements (.e. size ) dimension.","code":""},{"path":"/reference/size.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Size of an object — size","text":"MATLAB, size(1, 100) returns 1. matter fact, user calls dimension x size() always returns 1. R's default behavior reasonable cases (.e., returning NA), since point function replicate MATLAB behaviors (bugs questionable behaviors included), function also .","code":""},{"path":"/reference/size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of an object — size","text":"","code":"size(10) #> [1] 1 size(1:4) #> [1] 1 4 size(matrix(1:6, 2)) #> [1] 2 3 size(array(1:24, c(2, 3, 4))) #> [1] 2 3 4"},{"path":"/reference/sortrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort rows of matrix or table — sortrows","title":"Sort rows of matrix or table — sortrows","text":"Emulates behavior sortrows function Matlab","code":""},{"path":"/reference/sortrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort rows of matrix or table — sortrows","text":"","code":"sortrows(A, column = 1)"},{"path":"/reference/sortrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort rows of matrix or table — sortrows","text":"matrix column ordering column","code":""},{"path":"/reference/sortrows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort rows of matrix or table — sortrows","text":"matrix sorted first row, second","code":""},{"path":"/reference/sortrows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort rows of matrix or table — sortrows","text":"","code":"mx <- matrix(c(3, 2, 2, 1, 1, 10, 0, pi), 4) mx #>      [,1]      [,2] #> [1,]    3  1.000000 #> [2,]    2 10.000000 #> [3,]    2  0.000000 #> [4,]    1  3.141593 sortrows(mx) #>      [,1]      [,2] #> [1,]    1  3.141593 #> [2,]    2 10.000000 #> [3,]    2  0.000000 #> [4,]    3  1.000000"},{"path":"/reference/squeeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Squeeze — squeeze","title":"Squeeze — squeeze","text":"Remove dimensions length 1","code":""},{"path":"/reference/squeeze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze — squeeze","text":"","code":"squeeze(A)"},{"path":"/reference/squeeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze — squeeze","text":"input array matrix","code":""},{"path":"/reference/squeeze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squeeze — squeeze","text":"array elements input array, dimensions length 1 removed.","code":""},{"path":"/reference/squeeze.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Squeeze — squeeze","text":"function implements behavior homonimous function Matlab. B = squeeze() returns array elements input array , dimensions length 1 removed. example, 3--1--1--2 array, squeeze() returns 3--2 matrix. row vector, column vector, scalar, array dimensions length 1, squeeze returns input .","code":""},{"path":"/reference/squeeze.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Squeeze — squeeze","text":"basically wrapper drop() minor adjustment adapt output happens Matlab","code":""},{"path":"/reference/squeeze.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Squeeze — squeeze","text":"Waldir Leoncio","code":""},{"path":"/reference/squeeze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Squeeze — squeeze","text":"","code":"A <- array(dim = c(2, 1, 2)) A[, , 1] <- c(1, 2) A[, , 2] <- c(3, 4) print(A) #> , , 1 #>  #>      [,1] #> [1,]    1 #> [2,]    2 #>  #> , , 2 #>  #>      [,1] #> [1,]    3 #> [2,]    4 #>  squeeze(A) #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4"},{"path":"/reference/strcmp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two character elements — strcmp","title":"Compare two character elements — strcmp","text":"Logical test two character elements identical","code":""},{"path":"/reference/strcmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two character elements — strcmp","text":"","code":"strcmp(s1, s2)"},{"path":"/reference/strcmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two character elements — strcmp","text":"s1 first character element (string, vector matrix) s2 second character element (string, vector matrix)","code":""},{"path":"/reference/strcmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two character elements — strcmp","text":"logical element type input","code":""},{"path":"/reference/strcmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two character elements — strcmp","text":"","code":"strcmp(\"yes\", \"no\") #> [1] FALSE strcmp(\"yes\", \"yes\") #> [1] TRUE strcmp(\"no\", \"no\") #> [1] TRUE"},{"path":"/reference/times.html","id":null,"dir":"Reference","previous_headings":"","what":"Element-wise matrix multiplication — times","title":"Element-wise matrix multiplication — times","text":"Emulates times() .* operators Matlab.","code":""},{"path":"/reference/times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element-wise matrix multiplication — times","text":"","code":"times(a, b)"},{"path":"/reference/times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element-wise matrix multiplication — times","text":"first factor multiplication b second factor multiplication","code":""},{"path":"/reference/times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Element-wise matrix multiplication — times","text":"matrix dimensions equal larger two factors","code":""},{"path":"/reference/times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Element-wise matrix multiplication — times","text":"function basically handles elements different length better * operator R, least far behavior Matlab user expecting.","code":""},{"path":"/reference/times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Element-wise matrix multiplication — times","text":"","code":"times(9, 6) #>      [,1] #> [1,]   54 x <- matrix(1:4, 2) y <- c(10, 3) print(x) #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 print(y) #> [1] 10  3 times(x, y) #>      [,1] [,2] #> [1,]   10   30 #> [2,]    6   12 x * y #>      [,1] [,2] #> [1,]   10   30 #> [2,]    6   12"},{"path":"/reference/uigetfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a file for loading — uigetfile","title":"Select a file for loading — uigetfile","text":"Loosely mimics functionality uigetfile function Matlab.","code":""},{"path":"/reference/uigetfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a file for loading — uigetfile","text":"","code":"uigetfile(filter = \"\", title = \"\")"},{"path":"/reference/uigetfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a file for loading — uigetfile","text":"filter Filter listed files title Pre-prompt message","code":""},{"path":"/reference/uigetfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a file for loading — uigetfile","text":"list containing name file selected path","code":""},{"path":"/reference/uigetfile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select a file for loading — uigetfile","text":"https://se.mathworks.com/help/matlab/ref/uigetfile.html","code":""},{"path":"/reference/uigetfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a file for loading — uigetfile","text":"","code":"if (FALSE) {   uigetfile() }"},{"path":"/reference/uiputfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Save file — uiputfile","title":"Save file — uiputfile","text":"function intends loosely mimic behaviour homonymous Matlab function.","code":""},{"path":"/reference/uiputfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save file — uiputfile","text":"","code":"uiputfile(filter = \".rda\", title = \"Save file\")"},{"path":"/reference/uiputfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save file — uiputfile","text":"filter accepted file extension title Title","code":""},{"path":"/reference/uiputfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save file — uiputfile","text":"list containing name path file saved","code":""},{"path":"/reference/uiputfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save file — uiputfile","text":"","code":"if (FALSE) {   uigetfile() }"},{"path":"/reference/zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix of zeros — zeros","title":"Matrix of zeros — zeros","text":"wrapper zeros_or_ones() replicates behavior zeros() function Matlab","code":""},{"path":"/reference/zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix of zeros — zeros","text":"","code":"zeros(n1, n2 = n1, ...)"},{"path":"/reference/zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix of zeros — zeros","text":"n1 number rows n2 number columns ... extra dimensions","code":""},{"path":"/reference/zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix of zeros — zeros","text":"n1--n2 matrix zeros","code":""},{"path":"/reference/zeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix of zeros — zeros","text":"","code":"zeros(5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 zeros(5, 3) #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    0    0    0 #> [3,]    0    0    0 #> [4,]    0    0    0 #> [5,]    0    0    0"},{"path":"/reference/zeros_or_ones.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix of zeros or ones — zeros_or_ones","title":"Matrix of zeros or ones — zeros_or_ones","text":"Generates square rectangular matrix zeros ones","code":""},{"path":"/reference/zeros_or_ones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix of zeros or ones — zeros_or_ones","text":"","code":"zeros_or_ones(n, x)"},{"path":"/reference/zeros_or_ones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix of zeros or ones — zeros_or_ones","text":"n scalar 2D vector x value fill matrix ","code":""},{"path":"/reference/zeros_or_ones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix of zeros or ones — zeros_or_ones","text":"n--n matrix filled x","code":""},{"path":"/reference/zeros_or_ones.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matrix of zeros or ones — zeros_or_ones","text":"wrapper function replicate behavior zeros() ones() functions Matlab","code":""},{"path":"/reference/zeros_or_ones.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Matrix of zeros or ones — zeros_or_ones","text":"Actually works x, need bother imposing validation controls .","code":""}]
